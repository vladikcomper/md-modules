
; ===============================================================
; ---------------------------------------------------------------
; Error handling and debugging modules
; 2016-2024, Vladikcomper
; ---------------------------------------------------------------
; Test normal and shadow macros (e.g. "Console" vs "_Console")
; Ensure code generation consistency
; ---------------------------------------------------------------

__DEBUG__:		equ	1		; enable KDebug

	include	"..\..\..\build\modules\mdshell\headless\MDShell.asm"

	if __ASM68K__
		opt		l+			; use "." for local labels for AS compatibility

		include	"..\..\..\build\modules\errorhandler\asm68k-debug\Debugger.asm"
	else
		include	"..\..\..\build\modules\errorhandler\as\Debugger.asm"
	endif

; --------------------------------------------------------------
Main:
	; Code generated by both Normal and Shadow macros should match
	lea		GeneratedCode_NormalMacros, a0
	lea		GeneratedCode_ShadowMacros, a1
	move	#(GeneratedCode_NormalMacros_End-GeneratedCode_NormalMacros)/2-1, d0

	.compareLoop:
		cmpm.w	(a0)+, (a1)+
		dbne	d0, .compareLoop
		bne		.comparisonFailed

	assert.l a0, eq, #GeneratedCode_NormalMacros_End
	assert.l a1, eq, #GeneratedCode_ShadowMacros_End

	Console.WriteLine "Compared %<.w #GeneratedCode_NormalMacros_End-GeneratedCode_NormalMacros dec> bytes"
	Console.WriteLine "%<pal1>TEST SUCCESSFUL"
	rts

; --------------------------------------------------------------
.comparisonFailed:
	Console.WriteLine "%<pal1>TEST FAILED%<pal0>"
	subq.w	#2, a0
	subq.w	#2, a1
	Console.WriteLine "Normal: %<.w (a0)> (@%<.l a0 sym>)"
	Console.WriteLine "Shadow: %<.w (a1)> (@%<.l a1 sym>)"
	rts

; --------------------------------------------------------------
; NOTE 1: The code below isn't executed, only compared.
;
; NOTE 2: Place macros in "_NormalMacros" and "_ShadowMacros"
; sections in the same order for comparison to work.
;
; NOTE 3: Surround shadow macros with
; 	`move.w sr,-(sp)` / `move.w (sp)+,sr`
; so the code matches (with a few exceptions).
; --------------------------------------------------------------

GeneratedCode_NormalMacros:
		illegal			; DON'T TRY TO EXECUTE THIS! COMPARE BYTES OF THE GENERATED CODE BELOW

	.Console_Run:
		Console.Run	Main

	.Console_Write:
		Console.Write "Text-only Console.Write"
		Console.WriteLine "Text-only Console.WriteLine"
		Console.Write "Text and arguments Console.Write %<.w d0> %<.l a0 sym>"
		Console.WriteLine "Text and arguments Console.WriteLine %<.w d0> %<.l a0 sym>"

	.Console_SetXY:
		Console.SetXY #1, #1
		Console.SetXY d0, d1

	.Console_Clear:
		Console.Clear

	.Console_Sleep:
		Console.Sleep #60
		Console.Sleep d0

	.Console_BreakLine:
		Console.BreakLine

	.KDebug_Write:
		KDebug.Write "Text-only KDebug.Write"
		KDebug.WriteLine "Text-only KDebug.WriteLine"
		KDebug.Write "Text and arguments KDebug.Write %<.w d0> %<.l a0 sym>"
		KDebug.WriteLine "Text and arguments KDebug.WriteLine %<.w d0> %<.l a0 sym>"

	.KDebug_Timer:
		KDebug.StartTimer
		KDebug.EndTimer

	.KDebug_BreakPoint:
		KDebug.BreakPoint

GeneratedCode_NormalMacros_End:
		illegal

; --------------------------------------------------------------
GeneratedCode_ShadowMacros:
		illegal			; DON'T TRY TO EXECUTE THIS! COMPARE BYTES OF THE GENERATED CODE BELOW

	.Console_Run:
		_Console.Run Main		; shadow "_Console.Run" doesn't need to preserve SR, because it's a no-return

	.Console_Write:
		move.w sr,-(sp)
		_Console.Write "Text-only Console.Write"
		move.w (sp)+, sr
		move.w sr,-(sp)
		_Console.WriteLine "Text-only Console.WriteLine"
		move.w (sp)+, sr
		move.w sr,-(sp)
		_Console.Write "Text and arguments Console.Write %<.w d0> %<.l a0 sym>"
		move.w (sp)+, sr
		move.w sr,-(sp)
		_Console.WriteLine "Text and arguments Console.WriteLine %<.w d0> %<.l a0 sym>"
		move.w (sp)+, sr

	.Console_SetXY:
		move.w sr,-(sp)
		_Console.SetXY #1, #1
		move.w (sp)+, sr
		move.w sr,-(sp)
		_Console.SetXY d0, d1
		move.w (sp)+, sr

	.Console_Clear:
		move.w sr,-(sp)
		_Console.Clear
		move.w (sp)+, sr

	.Console_Sleep:
		move.w sr,-(sp)
		_Console.Sleep #60
		move.w (sp)+, sr
		move.w sr,-(sp)
		_Console.Sleep d0
		move.w (sp)+, sr

	.Console_BreakLine:
		move.w sr,-(sp)
		_Console.BreakLine
		move.w (sp)+, sr

	.KDebug_Write:
		move.w sr,-(sp)
		_KDebug.Write "Text-only KDebug.Write"
		move.w (sp)+, sr
		move.w sr,-(sp)
		_KDebug.WriteLine "Text-only KDebug.WriteLine"
		move.w (sp)+, sr
		move.w sr,-(sp)
		_KDebug.Write "Text and arguments KDebug.Write %<.w d0> %<.l a0 sym>"
		move.w (sp)+, sr
		move.w sr,-(sp)
		_KDebug.WriteLine "Text and arguments KDebug.WriteLine %<.w d0> %<.l a0 sym>"
		move.w (sp)+, sr

	.KDebug_Timer:
		move.w sr,-(sp)
		_KDebug.StartTimer
		move.w (sp)+, sr
		move.w sr,-(sp)
		_KDebug.EndTimer
		move.w (sp)+, sr

	.KDebug_BreakPoint:
		move.w sr,-(sp)
		_KDebug.BreakPoint
		move.w (sp)+, sr

GeneratedCode_ShadowMacros_End:
		illegal

; --------------------------------------------------------------

	if __ASM68K__=1
		include	"..\..\..\build\modules\errorhandler\asm68k-debug\ErrorHandler.asm"
	else
		include	"..\..\..\build\modules\errorhandler\as\ErrorHandler.asm"
	endif
